jsp
URL:统一资源定位符
	组成：协议部分+主机ip地址：端口号+项目资源地址
Tomcat：应用服务器，jsp/servlet容器
	目录结构：
		/bin	存放各种平台下用于启动和停止Tomcat的脚本文件
		/conf	存放Tomcat服务器的各种配置文件
				修改端口号server.xml
				<Connector port="8080"
				 protocol="HTTP/1.1"
				 connectionTimeout="20000"
				 redirectPort="8443" />

				修改欢迎页web.xml
				<welcome-file-list>
					<welcome>welcome.jsp</welcome>
				</welcome-file-list>	
		/lib	存放Tomcat服务器所需的各种JAR文件
		/logs	存放Tomcat的日志文件
		/temp	Tomcat运行时用于存放临时文件
		/webapps	当发布Web应用时，默认情况下会将Web应用的文件存放于此目录中
				手动发布项目时。需要将项目复制到该目录下

		/work	Tomcat把由JSP生成的Servlet放于此目录下

jsp页面元素
	静态内容 
		HTML静态文本
	指令  
		<%@ %>
		page指令  <%@ page 属性1="属性值1" 属性2="属性值2".....属性n="属性值n" %>
		常用属性：
			language  指定jsp页面使用的脚本语言  默认值java
			import  引用脚本中使用到的类文件  
			contentType  用来指定jsp页面采用的编码方式  默认值 text/html,ISO--8859-1
		include指令 <%@ include file="path"%>
	小脚本
		<% java代码 %>
	表达式
		<%=java表达式 %>
	声明
		<%! 方法或者全局变量%>
	注释
		<!--html注释，客户端可以查看到-->
		<%--jsp注释，客户端无法查看--%>
		
jsp执行过程
	翻译(jsp->.java)---->编译(.java->.class)---->执行

(!!)JSP内置对象
	九大内置对象
		out  javax.servlet.jsp.JspWriter类实例  用于向客户端输出数据,在response对象中写入内容
		request  javax.servlet.http.HttpServletRequest实例  用于处理客户端请求
			常用方法：
				String getParameter(String name)
				String[] getParameterValues(String name)
				void setCharacterEncoding(String charset)  指定每一个请求的编码
				RequestDispatcher getRequestDispather(String path)  返回一个RequestDispather对象，该对象的forward()方法用于转发请求
			页面设置支持中文字符的字符集
				1、get方式提交数据  读取数据后进行编码，逐个进行编码转换
					String name = request.getParameter("name");
					name = new String(name.getBytes("ISO-8859-1"),"utf-8");
				2、post方式提交数据  设置请求信息的编码再读取信息
					request.setCharacterEncoding("utf-8");
					String name = request.getParameter("name");
				3、在Tomcat目录下\conf\server.xml设置字符集（不推荐使用）
		response  javax.servlet.http.HttpServletResponse实例  用于响应客户端请求并向客户端输出信息
			常用方法：
				void sendRedirect(String location)  将请求重新定位到一个不同的URL，即页面重定向
		session  javax.servlet.http.HttpSession实例  与浏览器一一对应，同一个session对象sessionId相同
			常用方法：
				void setAttribute(String key,Object value)  以key/value的形式保存对象值
				Object getAttribute(String key)  通过key获取对象值，需要向下转型为具体类型
				void invalidate()  设置session对象失效
				String getId()  获取sessionId
				void setMaxInactiveInterval()  设定session的非活动时间
				int getMaxInactiveInterval()  获取session的有效非活动时间（以秒为单位）
				void removeAttribute(String key)  从session中删除指定名称key所对应的对象
		application  javax.servlet.ServletContext实例  类似于系统的全局变量，用于实现web应用中的资源共享
			示例代码：统计网站访问次数
				<%//统计页
					Integer count = (Interger)application.getAttribute("count");
					if(null == count){
						count = 1;
					}else{
						count++;
					}
					application.setAttribute("count",count);
				%>
				<%//显示页
					Integer count = (Integer)application.getAttribute("count");
					out.print("您是第"+count+"个访问本站的客户");
				%>
		exception  包装了从先前页面抛出的异常信息。通常被用来产生对出错条件的适当响应
			(!)只有在错误页面中才可使用,即在页面指令中设置:<%@ page isErrorPage=“true”%>
		config  javax.servlet.ServletConfig实例  Servlet的配置信息
		page  类似于java中的this关键字
		pageContext  javax.servlet.jsp.PageContext实例  提供对jsp页面所有对象及命名空间的访问
JSP内置对象作用域
	page  在一个页面范围内有效，通过pageContext对象访问
	request  一个服务器请求范围内有效
	session  一次会话，浏览器关闭后失效
	application  面对整个web应用程序，程序结束后失效

Cookie:Web服务器保存在客户端的一系列文本信息,只能存储字符串
	作用：
		对特定对象的追踪
		统计网页浏览次数
		简化登录
	安全性能：
		容易信息泄露
	使用：
		创建Cookie对象
			Cookie newCookie = new Cookie(String name,String value);
		写入cookie
			response.addCookie(newCookie);
		读取cookie
			Cookie[] cookies = request.getCookies();
		String   str   =   java.net.URLEncoder.encode("中文");            //编码
		String   str   =   java.net.URLDecoder.decode("编码后的字符串");   // 解码
	常用方法：
		void setMaxAge(int enpiry)  设置cookie的有效期，以秒为单位
		void setValue(String value)  cookie创建后，对cookie进行赋值
		String getName()
		String getValue()
		int getMaxAge()
JavaBean:
	优势：
		1、解决代码重复编写，减少代码冗余
		2、功能区分明确
		3、提高了代码的可维护性
			分类：功能上可分为封装业务和封装数据
	使用：（配合jsp动作）
	<jsp:useBean id="name" class="mypackage/TestBean">
	<jsp:setProperty name = "name" property="(TestBean属性名)"/>//只有在新建实例时才会运行，使用现有实例不会执行
	<jsp:getProperty name = "name" property="(TestBean属性名)"/>
	</jsp:useBean>

文件的上传与下载
	上传 commons-fileupload组件使用
	(!!!)使用文件上传时，必须设置form的enctype属性为enctype="multipart/form-data" 提交方式method="post"
		常用API
			ServletFileUpload类的常用方法
				void setSizeMax(long sizeMax)  设置请求信息实体内容的最大允许字节数byte
				List parseRequest(HttpSrevletRequest req)  解析form表单中的每一个字符的数据，返回一个FileItem对象的集合
				static final boolean isMultipartContent(HttpServletRequest req)  判断请求信息的内容是否是一个"multipart/form-data"类型
				void setHeaderEncoding(String encoding)  设置转换时使用的字符集编码
			FileItem接口
				boolean isFormField  判断FileItem对象的封装类型（普通表单字段返回true，文件表单字段返回false）
				String getName()  获得文件上传字段中的文件名（普通表单字段返回null）
				String getFieldName()  返回表单字段元素的name属性值
				void write()  将FileItem对象中保存的主体内容保存到指定的文件中
				String getString()  将FileItem对象保存的实体内容以一个字符串返回。其重载方法public String getString(String Encoding)中的参数用指定的字符集编码方式
				long getSize()  返回单个上传文件的字节数（byte）
			FileItemFactory接口与 DiskFileItemFactroy实现类
				void setSizeThreshold(int sizeThreshold)  设置内存缓冲区的大小
				void setRepositoryPath(String path)  设置临时文件存放的目录

	示例代码：
		//文件上传处理页面
		String userName = null;
		String fileName = null;
		//设置编码字符集
		request.setCharacterEncoding("utf-8");
		//处理带有文本域的表单请求（文件上传）
		//判断本次请求是否带有文件上传的请求
		if (ServletFileUpload.isMultipartContent(request)) {
			//带有文件
			//创建FileItemFactory对象
			DiskFileItemFactory factory = new DiskFileItemFactory();
			//创建ServletFileUpload对象
			ServletFileUpload upload = new ServletFileUpload(factory);
			//设置ServletFileUpload字符集
			upload.setHeaderEncoding("utf-8");
			//解析请求，获取fileItem集合对象
			List<FileItem> itemList = upload.parseRequest(request);
			//循环遍历所有表单元素
			for (FileItem item : itemList) {
				//判断每个元素的真实类型
				if (item.isFormField()) {
					//普通元素
					//获取普通元素的fieldName
					String fieldName = item.getFieldName();
					//判断元素并使用元素
					if ("userName".equals(fieldName)) {
						userName = item.getString("utf-8");
					}
				} else {
					//文件元素
					//获取文件名称
					fileName = item.getName();
					//非空判断
					if (null == fileName || "".equals(fileName)) {
						fileName = "没有选择文件";
					} else {
						//兼容浏览器对文件名的处理
						fileName = fileName.substring(fileName.lastIndexOf(File.separator) + 1);
						//获取服务器端文件保存路径（相对路径：/saveFile）
						String absPath = application.getRealPath(File.separator + "saveFile");
						//创建文件对象
						File file = new File(absPath, fileName);
						//写文件
						item.write(file);
					}
				}
			}
			//处理结果输出
		} else {
			//不带有文件，普通方式获取表单元素
		}
	下载
		两种实现方式
			定义超链接指向目标资源
				弊端：
					直接暴露资源的URL
					容易被其他网站盗链，造成本地服务器下载负载过重
			使用文件输出流实现下载（文件读写）
				步骤：将源文件封装成字节输入流对象-->读取二进制字节数据并传输给客户端
	代码示例：
			//下载处理页面（文件读写）
			request.setCharacterEncoding("utf-8");
			String fileName = request.getParameter("fileName");
			//获取指定文件的输入流
			String absFilePath = application.getRealPath(File.separator + "saveFile" + File.separator + fileName);
			//创建输入流
			FileInputStream fis = new FileInputStream(absFilePath);
			//设置本次响应类型
			response.setContentType("application/x-msdownload");
			response.setHeader("Content-Disposition", "attachment;fileName=" + fileName);
			//写出流信息
			OutputStream os = response.getOutputStream();
			byte[] b = new byte[fis.available()];
			fis.read();
			os.write(b);
			fis.close();
			//防止重复写出异常
			out.clear();
			out = pageContext.pushBody();

(!!!)
转发与重定向的区别：
	转发：request.getRequestDispatcher(String path).forward(request,response)
		1、服务器端发挥作用，通过forward()方法将提交信息在多个页面之间进行传递
		2、客户端浏览器的地址栏不会显示出转向后的地址
	重定向：response.sendRedirect(String location);
		1、在客户端发挥作用，通过请求新的地址实现页面转向
		2、在地址栏可以显示重定向后的地址

cookie 与session对比
	session
		1、在服务器端保存用户信息
		2、session中保存的是Object类型
		3、随会话的结束而将其存储的数据销毁
		4、保存重要的信息
	cookie
		1、在客户端保存用户信息
		2、cookie保存的是String类型
		3、可以长期保存在客户端
		4、保存不重要的用户信息
(补充)
include指令与include动作对比
	　　include指令是编译阶段的指令，即include所包含的文件的内容是编译的时候插入到JSP文件中，JSP引擎在判断JSP页面未被修改，否则视为已被修改。由于被包含的文件是在编译时才插入的，因此如果只修改了include文件内容，而没有对JSP修改，得到的结构将不会改变，所以直接执行已经存在的字节码文件，而没有重新编译。因此对不经常变化的内容，用include指令是合适的，如果需要的内容是经常变化的，则需要动作元素<jsp:include>.下面将详细区分他们之间的不同

	1.include指令  语法：<%@ include file="sample.jsp" %>
		include可以在JSP页面转换成Servlet之前，将JSP代码插入其中。它的主要优点是功能强大，所包含的代码可以含有总体上影响主页面的JSP构造，比如属性、方法的定义和文档类型的设定。它的缺点是难于维护只要被包含的页面发生更改，就得更改主页面，这是因为主页面不会自动地查看被包含的页面是否发生更改。
	2.include动作  语法： <jsp:include page="sample.jsp" flush="true">
		jsp:include动作是在主页面被请求时，将次级页面的输出包含进来。尽管被包含的页面的输出中不能含有JSP，但这些页面可以是其他资源所产生的结果。服务器按照正常的方式对指向被包含资源的URL进行解释，因而这个URL可以是Servlet或JSP页面。服务器以通常的方式运行被包含的页面， 将产生的输出放到主页面中，这种方式与RequestDispatcher类的include方法一致。它的优点是在被包含的页面发生更改时，无须对主页面做出修改。它的缺点是所包含的是次级页面的输出，而非次级页面的实际代码，所以在被包含的页面中不能使用任何有可能在整体上影响主页面的JSP构造。
	   其中参数设置可以没有，如果没有参数设置，则必须采用<jsp:include page="sample.jsp" flush="true"/>形式
	3. 使用include动作还是include指令？
	　　使用include指令，如果被包含的文件发生改变，那么，用到它的所有Jsp页面都需要更新。
	　　仅当include动作不能满足要求时，我们才应该使用include指令。
	　　有些开发人员认为include指令生成的代码执行起来比使用include动作的代码更快。尽管原则上由可能的确如此，但性能上的差异很小，以致难以测 量，同时，include动作在维护上的优势十分巨大，当两种方法都可以使用时，include动作几乎肯定是首选的方法。
	　　对于文件包含，应该尽可能地使用include动作。仅在所包含的文件中定义了主页面要用到的字段或方法，或所包含的文件设置了主页面的响应报头时，才应该使用include指令。

	既然include指令产生难以维护的代码，为什么人们还要使用它呢？
	　　因为include指令更为强大。include指令允许所包含的文件中含有影响主页面的Jsp代码，比如响应报头的设置和字段、方法的定义。

禁用cookie，使用URL重写技术