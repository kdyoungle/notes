数据库：
MySQL
一、常用术语：
	数据库:   数据库是一些关联表的集合。.
	数据表:   表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。
	列:   一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。
	行：  一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。
	冗余：  存储两倍数据，冗余可以使系统速度更快。
	主键（primary key）：  主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。
	外键(foreign key)：  外键用于关联两个表。
	复合键：  复合键（组合键）将多个列作为一个索引键，一般用于复合索引。
	索引：  使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。
	参照完整性:   参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。
二、基础
	1、数据完整性
		数据完整性=可靠性+准确性
		四种完整性约束：
			域完整性
				约束方法：限制数据类型、外键约束、默认值、非空约束
			实体完整性
				约束方法：唯一约束、主键约束、标识列
			引用完整性
				约束方法：外键约束
			自定义完整性
				约束方法：存储过程、触发器
	2、数据类型：
		文本数据类型：
			char  固定长度数据
			varchar  可变长度
			text  长文本
		日期和时间：
			datetime
		数字数据： 
			int
			smallint
			float
			double
		高精度数据类型：
			decimal  货币等对精度要求较高的数据
		Bit数据类型：
			Bit  存储布尔数据类型
	3、选择主键的原则：  主键列数值不能为空
		最少性  尽量选择单个键作为主键
		稳定性  尽量选择数据更新少的作为主键
	4、主外键建立后注意事项
		当主表没有对应的数据时，不能将数据添加到子表
		不能更改主表的值而导致子表中的值孤立
		子表存在与主表对应的记录，不能从主表中删除
		删除主表前先删除子表
	
	5、 主表和子表（从表）
		
		主表：在数据库中建立的表格即Table，其中存在主键(primary key)用于与其它表相关联，并且作为在主表中的唯一性标识。

		子表（从表）：以主表的主键（primary key）值为外键 (Foreign Key)的表，可以通过外键与主表进行关联查询。从表与主表通过外键进行关联查询。
三、使用DQL查询数据库
	1、SQL的组成
		DML  数据操作语言
			插入、删除、修改数据库中的数据
			
		DCL  数据控制语言
			用来控制存储许可、存储权限等
		DQL  数据查询语言
			用来查询数据库中的数据
		DDL  数据定义语言
			用来建立数据库、数据库对象和定义表的列
	2、语法：
		插入
			INSERT [INTO] 表名 [(列名)] VALUES (值列表) 
			INSERT [INTO] 表名 [(列名)] VALUES (值列表),(值列表),(值列表)...
			
			INSERT [INTO] <表名>(列名)
			SELECT <列名>
			FROM <源表名>
		更新修改数据行
			UPDATE 表名 SET 列名 = 更新值
			[WHERE 更新条件]
		删除数据行
			DELETE [FROM] 表名   ！数据可以恢复，自增列计数维持 
			[WHERE 删除条件(要删除的行)]
			
			TRUNCATE [FROM] 表名   ！数据不可以恢复，自增列重新开始编号 
			[WHERE 删除条件(要删除的行)]
		查询
			查询部分行列
				SELECT <行列名>
				FROM <表名>
				[WHERE <查询条件表达式>]
				[ORDER BY <排序的列名>[ASC(升序默认值)或者DESC(降序)]]
			查询全部的行列
				SELECT * FROM [表名]
			列别名
				AS关键字
			空行、常量列
			限制行数
				limit关键字
四、mysql事务管理
	MySQL的事务支持不是绑定在MySQL服务器本身，而是与存储引擎相关
		1.MyISAM：不支持事务，用于只读程序提高性能 
		2.InnoDB：支持ACID事务、行级锁、并发 
		3.Berkeley DB：支持事务
	事务的四个标准属性 ACID
		原子性  Atomicity  一组事务，要么成功，要么撤回
		稳定性  Consistency  有非法数据（外键约束之类），事务撤回
		隔离性	Isolation  事务独立运行。一个事务处理后的结果影响其他事务，那么其他的事务撤回。事务的100%隔离，需要牺牲速度。
		可靠性  Durtability  软硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改可靠性和高速度不可兼得 innodb_flush_log_at_trx_commit选项，决定什么时候把事务保存到日志里。
	MYSQL的事务处理主要有两种方法
		1.用begin,rollback,commit来实现
			begin开始一个事务
			rollback事务回滚
			commit 事务确认
		2.直接用set来改变mysql的自动提交模式
			mysql默认是自动提交的，也就是你提交一个query，就直接执行！可以通过
			set autocommit = 0 禁止自动提交
			set autocommit = 1 开启自动提交

		mysql的数据库事务隔离级别是：
	Read Uncommitted（读取未提交内容）
       在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。
	Read Committed（读取提交内容）
       这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。
	Repeatable Read（可重读）
       这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读（Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。
	Serializable（可串行化） 
       这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。

五、mysql索引
	1、索引可以大大提高mysql的检索速度，但是会降低增删改的执行速度，因为在更新表时，不仅要保存数据，还要保存索引文件，建立索引会占用磁盘空间的索引文件
	2、创建索引时，要确保该索引是应用在sql查询语句的条件（一般作为where字句的条件），本质上索引也是一张表，该表保存了主键和索引字段，并指向实体表的记录
	3、创建方式：
		普通索引
			创建索引：create index indexname on mytable (username(length))
				注：如果是char varchar类型，length可以小于字段实际长度；如果是blob或text类型，必须指定length
			修改表结构：alter  mytabel add index [indename] on (username(length))
			创建表的时候直接指定：
				creat table mytable(
				id int not null
				username varchar(16) not null
				index [indexname] (username(length))
				)
			删除索引：drop index [indexname] on mytable
		唯一索引：索引列的值必须唯一，但是允许有空值。如果是组合索引，则列值的组合必须唯一
			创建方式（使用unique关键字）
	4、 唯一索引：与"普通索引"类似，不同的就是：索引列的值必须唯一，但允许有空值。
		主键索引：它 是一种特殊的唯一索引，不允许有空值。
		全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。
		组合索引：为了更多的提高mysql效率可建立组合索引，遵循“最左前缀”原则。
六、mysql的备份与恢复
	使用mysqldump导出固定条件的数据库
		1、导出整个数据库
			mysqldump -u 用户名 -p 数据库名 > 导出的文件名
		2、导出一个表
			mysqldump -u 用户名 -p 数据库名 表名 > 导出的文件名
		3、导出一个数据结构
			mysqldump -u 用户名 -p -d --add-drop-table 数据库名 > 导出的文件名
			#-d不到处数据，只导出结构  --add-drop-table 在每一个create语句之前增加一个drop table
		4、导入数据库
			source 需要导入的文件名
	冷备份与热备份
	冷备份（off, 慢， 时间点上恢复）
		冷备份发生在数据库已经正常关闭的情况下，当正常关闭时会提供给我们一个完整的数据库。冷备份是将关键性文件拷贝到另外位置的一种说法。对于备份数据库信息而言，冷备份是最快和最安全的方法。

		冷备份的优点： 
		1．是非常快速的备份方法（只需拷贝文件） 
		2．容易归档（简单拷贝即可） 
		3．容易恢复到某个时间点上（只需将文件再拷贝回去） 
		4．能与归档方法相结合，作数据库“最新状态”的恢复。 
		5．低度维护，高度安全。 

		冷备份的缺点： 
		1．单独使用时，只能提供到“某一时间点上”的恢复。 
		2．在实施备份的全过程中，数据库必须要作备份而不能作其它工作。也就是说，在冷备份过程中，数据库必须是关闭状态。 
		3．若磁盘空间有限，只能拷贝到磁带等其它外部存储设备上，速度会很慢。 
		4．不能按表或按用户恢复。 
		值得注意的是冷备份必须在数据库关闭的情况下进行，当数据库处于打开状态时，执行数据库文件系统备份是无效的 。而且在恢复后一定要把数据库文件的属组和属主改为mysql。

	热备份 （on, 快）
		热备份是在数据库运行的情况下，备份数据库操作的sql语句，当数据库发生问题时，可以重新执行一遍备份的sql语句。

		热备份的优点： 
		1．可在表空间或数据文件级备份，备份时间短。 
		2．备份时数据库仍可使用。 
		3．可达到秒级恢复（恢复到某一时间点上）。 
		4．可对几乎所有数据库实体作恢复。 
		5．恢复是快速的，在大多数情况下在数据库仍工作时恢复。 

		热备份的缺点： 
		1．不能出错，否则后果严重。 
		2．若热备份不成功，所得结果不可用于时间点的恢复。 
		3．因难于维护，所以要特别仔细小心，不允许“以失败而告终”。

		1）用 BACKUP TABLE 方法备份出来的文件，可以运行 RESTORE TABLE 语句来恢复数据表。
		2）用 SELECT INTO OUTFILE 方法备份出来的文件，可以运行 LOAD DATA INFILE 语句来恢复数据表。